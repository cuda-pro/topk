#include <raft/sparse/detail/utils.h>
#include <stdint.h>
#include <stdlib.h>

#include <chrono>
#include <numeric>
#include <optional>
#include <raft/core/mdspan.hpp>
#include <raft/core/resource/cuda_stream.hpp>
#include <raft/core/resources.hpp>
#include <raft/matrix/detail/select_warpsort.cuh>
#include <raft/matrix/select_k.cuh>
#include <raft/util/cudart_utils.hpp>
#include <rmm/device_uvector.hpp>
#include <vector>

template <typename IdxT>
auto gen_simple_ids(uint32_t batch_size, uint32_t len) -> std::vector<IdxT> {
    std::vector<IdxT> out(batch_size * len);
    auto s = rmm::cuda_stream_default;
    rmm::device_uvector<IdxT> out_d(out.size(), s);
    raft::sparse::iota_fill(out_d.data(), IdxT(batch_size), IdxT(len), s);
    raft::update_host(out.data(), out_d.data(), out.size(), s);
    s.synchronize();
    return out;
}

void raft_matrix_selectk(int topk, int batch_size, int len,
                         const std::vector<float>& scores, const std::vector<int>& indeces,
                         std::vector<float>& s_scores, std::vector<int>& s_doc_ids) {
    raft::resources handle;
    auto stream = raft::resource::get_cuda_stream(handle);
    rmm::device_uvector<float> d_scores(scores.size(), stream);
    raft::update_device(d_scores.data(), scores.data(), scores.size(), stream);
    rmm::device_uvector<float> d_out_scores(batch_size * topk, stream);
    rmm::device_uvector<int> d_out_ids(batch_size * topk, stream);
    auto in_extent = raft::make_extents<int64_t>(batch_size, len);
    auto out_extent = raft::make_extents<int64_t>(batch_size, topk);
    auto in_span = raft::make_mdspan<const float, int64_t, raft::row_major, false, true>(d_scores.data(), in_extent);
    auto out_span = raft::make_mdspan<float, int64_t, raft::row_major, false, true>(d_out_scores.data(), out_extent);
    auto out_idx_span = raft::make_mdspan<int, int64_t, raft::row_major, false, true>(d_out_ids.data(), out_extent);

    // note: if in_idx_span is null use std::nullopt prevents automatic inference of the template parameters.
#ifdef NULL_OPTIONAL
    raft::matrix::select_k<float, int>(handle, in_span, std::nullopt, out_span, out_idx_span, false, true);
#else
    rmm::device_uvector<int> d_doc_ids(len, stream);
    if (indeces.empty()) {
        // like std:itoa on gpu device global memory
        raft::sparse::iota_fill(d_doc_ids.data(), batch_size, int(len), stream);
        // stream.synchronize();
    } else {
        raft::update_device(d_doc_ids.data(), indeces.data(), indeces.size(), stream);
    }
    auto in_idx_span = raft::make_mdspan<const int, int64_t, raft::row_major, false, true>(d_doc_ids.data(), in_extent);
    raft::matrix::select_k<float, int>(handle, in_span, in_idx_span, out_span, out_idx_span, false, true);
#endif

    raft::update_host(s_scores.data(), d_out_scores.data(), d_out_scores.size(), stream);
    raft::update_host(s_doc_ids.data(), d_out_ids.data(), d_out_ids.size(), stream);
    raft::interruptible::synchronize(stream);
}

int main(int argc, char* argv[]) {
    int topk = argc > 1 ? atoi(argv[1]) : 100;
    int batch_size = argc > 2 ? atoi(argv[2]) : 1;

    std::vector<float> scores = {0.928571, 0.9, 0.896552, 0.875, 0.875, 0.870968, 0.866667, 0.866667, 0.866667, 0.857143, 0.857143, 0.857143, 0.83871, 0.83871, 0.83871, 0.818182, 0.818182, 0.8125, 0.8125, 0.8125, 0.8125, 0.8125, 0.806452, 0.8, 0.794118, 0.794118, 0.787879, 0.787879, 0.787879, 0.78125, 0.771429, 0.771429, 0.771429, 0.764706, 0.764706, 0.764706, 0.764706, 0.757576, 0.742857, 0.742857, 0.72973, 0.72973, 0.722222, 0.722222, 0.722222, 0.722222, 0.722222, 0.71875, 0.702703, 0.702703, 0.702703, 0.702703, 0.702703, 0.702703, 0.692308, 0.685714, 0.684211, 0.684211, 0.676471, 0.666667, 0.658537, 0.634146, 0.628571, 0.611111, 0.606061, 0.604651, 0.571429, 0.568182, 0.565217, 0.522727, 0.490566, 0.485714, 0.482759, 0.466667, 0.466667, 0.464286, 0.464286, 0.464286, 0.464286, 0.464286, 0.464286, 0.464286, 0.454545, 0.451613, 0.451613, 0.451613, 0.451613, 0.451613, 0.451613, 0.448276, 0.448276, 0.448276, 0.448276, 0.448276, 0.444444, 0.441176, 0.441176, 0.441176, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.4375, 0.433333, 0.433333, 0.433333, 0.433333, 0.433333, 0.433333, 0.433333, 0.433333, 0.433333, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.428571, 0.424242, 0.424242, 0.424242, 0.424242, 0.424242, 0.424242, 0.424242, 0.424242, 0.424242, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.419355, 0.416667, 0.416667, 0.416667, 0.416667, 0.416667, 0.416667, 0.416667, 0.416667, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.413793, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.411765, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.40625, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.405405, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.394737, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.393939, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.392857, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.388889, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.387097, 0.384615, 0.384615, 0.384615, 0.384615, 0.384615, 0.384615, 0.384615, 0.384615, 0.384615, 0.384615, 0.384615, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.382353, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.37931, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.378378, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.375, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429, 0.371429};
    size_t n_docs = scores.size();
    std::cout << "size:" << n_docs << " scores:" << std::endl;
    for (auto& s : scores) {
        // s *= -1;
        std::cout << s << ",";
    }
    std::cout << std::endl;

    auto ids = gen_simple_ids<int>(batch_size, (n_docs + batch_size - 1) / batch_size);
    std::cout << "size:" << ids.size() << " ids:" << std::endl;
    for (auto i : ids) {
        std::cout << i << ",";
    }
    std::cout << std::endl;

    // std::vector<int> indeces = {};
    std::vector<int> indeces;
    std::cout << " indeces:" << std::endl;
    for (auto i : indeces) {
        std::cout << i << ",";
    }
    std::cout << std::endl;

    std::vector<float> s_scores(batch_size * topk);
    std::vector<int> s_doc_ids(batch_size * topk);

    std::chrono::high_resolution_clock::time_point t1 = std::chrono::high_resolution_clock::now();
    raft_matrix_selectk(topk, batch_size, (n_docs + batch_size - 1) / batch_size, scores, indeces, s_scores, s_doc_ids);
    std::chrono::high_resolution_clock::time_point t2 = std::chrono::high_resolution_clock::now();
    std::cout << "raft_matrix_selectk cost " << std::chrono::duration_cast<std::chrono::microseconds>(t2 - t1).count() << " microseconds " << std::endl;

    std::cout << "s_scores:" << std::endl;
    for (auto s : s_scores) {
        std::cout << s << ",";
    }
    std::cout << std::endl;
    std::cout << "s_doc_ids:" << std::endl;
    for (auto id : s_doc_ids) {
        std::cout << id << ",";
    }
    std::cout << std::endl;
}